// Code generated by protoc-gen-go. DO NOT EDIT.
// source: register.proto

package proto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Closesession struct {
	SessionID            int64    `protobuf:"varint,1,opt,name=SessionID" json:"SessionID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Closesession) Reset()         { *m = Closesession{} }
func (m *Closesession) String() string { return proto.CompactTextString(m) }
func (*Closesession) ProtoMessage()    {}
func (*Closesession) Descriptor() ([]byte, []int) {
	return fileDescriptor_register_e4ff93e6e2c4b061, []int{0}
}
func (m *Closesession) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Closesession.Unmarshal(m, b)
}
func (m *Closesession) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Closesession.Marshal(b, m, deterministic)
}
func (dst *Closesession) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Closesession.Merge(dst, src)
}
func (m *Closesession) XXX_Size() int {
	return xxx_messageInfo_Closesession.Size(m)
}
func (m *Closesession) XXX_DiscardUnknown() {
	xxx_messageInfo_Closesession.DiscardUnknown(m)
}

var xxx_messageInfo_Closesession proto.InternalMessageInfo

func (m *Closesession) GetSessionID() int64 {
	if m != nil {
		return m.SessionID
	}
	return 0
}

type Replysession struct {
	SessionID            int64    `protobuf:"varint,1,opt,name=SessionID" json:"SessionID,omitempty"`
	Msg                  []byte   `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Replysession) Reset()         { *m = Replysession{} }
func (m *Replysession) String() string { return proto.CompactTextString(m) }
func (*Replysession) ProtoMessage()    {}
func (*Replysession) Descriptor() ([]byte, []int) {
	return fileDescriptor_register_e4ff93e6e2c4b061, []int{1}
}
func (m *Replysession) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Replysession.Unmarshal(m, b)
}
func (m *Replysession) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Replysession.Marshal(b, m, deterministic)
}
func (dst *Replysession) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Replysession.Merge(dst, src)
}
func (m *Replysession) XXX_Size() int {
	return xxx_messageInfo_Replysession.Size(m)
}
func (m *Replysession) XXX_DiscardUnknown() {
	xxx_messageInfo_Replysession.DiscardUnknown(m)
}

var xxx_messageInfo_Replysession proto.InternalMessageInfo

func (m *Replysession) GetSessionID() int64 {
	if m != nil {
		return m.SessionID
	}
	return 0
}

func (m *Replysession) GetMsg() []byte {
	if m != nil {
		return m.Msg
	}
	return nil
}

func init() {
	proto.RegisterType((*Closesession)(nil), "main.closesession")
	proto.RegisterType((*Replysession)(nil), "main.replysession")
}

func init() { proto.RegisterFile("register.proto", fileDescriptor_register_e4ff93e6e2c4b061) }

var fileDescriptor_register_e4ff93e6e2c4b061 = []byte{
	// 112 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2b, 0x4a, 0x4d, 0xcf,
	0x2c, 0x2e, 0x49, 0x2d, 0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0xc9, 0x4d, 0xcc, 0xcc,
	0x53, 0xd2, 0xe1, 0xe2, 0x49, 0xce, 0xc9, 0x2f, 0x4e, 0x2d, 0x4e, 0x2d, 0x2e, 0xce, 0xcc, 0xcf,
	0x13, 0x92, 0xe1, 0xe2, 0x0c, 0x86, 0x30, 0x3d, 0x5d, 0x24, 0x18, 0x15, 0x18, 0x35, 0x98, 0x83,
	0x10, 0x02, 0x4a, 0x76, 0x5c, 0x3c, 0x45, 0xa9, 0x05, 0x39, 0x95, 0x44, 0xa9, 0x16, 0x12, 0xe0,
	0x62, 0xce, 0x2d, 0x4e, 0x97, 0x60, 0x52, 0x60, 0xd4, 0xe0, 0x09, 0x02, 0x31, 0x93, 0xd8, 0xc0,
	0x56, 0x1b, 0x03, 0x02, 0x00, 0x00, 0xff, 0xff, 0x5b, 0x70, 0x52, 0x96, 0x8c, 0x00, 0x00, 0x00,
}
